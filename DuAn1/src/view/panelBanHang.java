/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.ChatLieu;
import model.ChiTietSP;
import model.HoaDon;
import model.HoaDonChiTiet;
import model.InHoaDon;
import model.KhachHang;
import model.KhuyenMai;
import model.MauSac;
import model.NhanVienModel;
import model.PTTToan;
import model.Size;
import model.UserLoginModel;
import reponsitory.KhuyenMaiRepository;
import service.ChatLieuService;
import service.ChiTietSPService;
import service.HoaDonChiTietService;
import service.HoaDonService;
import service.KhachHangService;
import service.LoginService;
import service.MauSacService;
import service.NhanVienService;
import service.PTTTService;
import service.SizeService;

/**
 *
 * @author THANH
 */
public class panelBanHang extends javax.swing.JPanel {

    private final ChiTietSPService chiTietSPService = new ChiTietSPService();
    private final HoaDonService hoaDonService = new HoaDonService();
    private final HoaDonChiTietService hoaDonChiTietService = new HoaDonChiTietService();
    private final NhanVienService nhanVienService = new NhanVienService();
    private final KhachHangService khachHangService = new KhachHangService();
    private final PTTTService pTTTService = new PTTTService();
    private final MauSacService mauSacService = new MauSacService();
    private final SizeService sizeService = new SizeService();
    private final ChatLieuService chatLieuService = new ChatLieuService();
    private final LoginService loginService = new LoginService();
    KhuyenMaiRepository kr = new KhuyenMaiRepository();

    private int currentMaHoaDonIndex = 0;
    private int index = -1;
    private List<ChiTietSP> listId = new ArrayList<>();
    /**
     * Creates new form panelBanHang
     */
    DefaultComboBoxModel<NhanVienModel> modelNV;
    DefaultComboBoxModel<KhachHang> modelKH;
    DefaultComboBoxModel<PTTToan> modelTT;
    DefaultComboBoxModel<MauSac> modelMacSac;
    DefaultComboBoxModel<Size> modelSize;
    DefaultComboBoxModel<ChatLieu> modelChatLieu;
    DefaultComboBoxModel<KhuyenMai> modelKhuyenMai;

    private NhanVienModel selectedNhanVien;
    private KhachHang selectedKhachHang;

    public panelBanHang() {
        initComponents();
        List<NhanVienModel> nhanVienModels = nhanVienService.getAll();
        modelNV = (DefaultComboBoxModel) new DefaultComboBoxModel<>(nhanVienModels.toArray());
        cbbNhanVienBH.setModel((DefaultComboBoxModel) modelNV);

        List<KhachHang> khachHangs = khachHangService.getAll();
        modelKH = (DefaultComboBoxModel) new DefaultComboBoxModel<>(khachHangs.toArray());
        cboKH.setModel((DefaultComboBoxModel) modelKH);

        List<PTTToan> pTTToans = pTTTService.getAll();
        modelTT = (DefaultComboBoxModel) new DefaultComboBoxModel<>(pTTToans.toArray());
        cbo_pttt.setModel((DefaultComboBoxModel) modelTT);

        List<MauSac> mauSacs = mauSacService.getAll();
        modelMacSac = (DefaultComboBoxModel) new DefaultComboBoxModel<>(mauSacs.toArray());
        cbo_locMauSac.setModel((DefaultComboBoxModel) modelMacSac);

        List<Size> sizes = sizeService.getAll();
        modelSize = (DefaultComboBoxModel) new DefaultComboBoxModel<>(sizes.toArray());
        cbo_locSize.setModel((DefaultComboBoxModel) modelSize);

        List<KhuyenMai> khuyenMais = kr.getAllByTT();
        modelKhuyenMai = (DefaultComboBoxModel) new DefaultComboBoxModel<>(khuyenMais.toArray());
        cbbGiaGiam.setModel((DefaultComboBoxModel) modelKhuyenMai);

        loadTableChitietSP();
        loadTableHoaDonCho();

    }

    public void resetfilde() {
        txtMaHD.setText(null);
        txtNgayTao.setText(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBanHang = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblHoaDon = new javax.swing.JTable();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblGioHang = new javax.swing.JTable();
        btnXoaSanPham = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        txt_timKiem = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblCTSanPham = new javax.swing.JTable();
        lbl_locMauSac = new javax.swing.JLabel();
        cbo_locMauSac = new javax.swing.JComboBox<>();
        lbl_locDongSP = new javax.swing.JLabel();
        cbo_locSize = new javax.swing.JComboBox<>();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        btnThayDoi = new javax.swing.JButton();
        cbbNhanVienBH = new javax.swing.JComboBox<>();
        btnThemKHBH = new javax.swing.JButton();
        btnReloadBH = new javax.swing.JButton();
        cboKH = new javax.swing.JComboBox<>();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        labelTT = new javax.swing.JLabel();
        lblGiamGia = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        btnHuyHoaDon = new javax.swing.JButton();
        btnLamMoi = new javax.swing.JButton();
        btnThanhToan = new javax.swing.JButton();
        lblThanhTien = new javax.swing.JLabel();
        lblThanhToan = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        txtTienKhachDua = new javax.swing.JTextField();
        lblTienThua = new javax.swing.JLabel();
        btnTaoHoaDon = new javax.swing.JButton();
        cbbGiaGiam = new javax.swing.JComboBox<>();
        lblTenVoucher = new javax.swing.JLabel();
        btnLoadVoucher = new javax.swing.JButton();
        txtMaHD = new javax.swing.JTextField();
        txtNgayTao = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        cbo_pttt = new javax.swing.JComboBox<>();

        pnlBanHang.setBackground(new java.awt.Color(255, 255, 255));
        pnlBanHang.setPreferredSize(new java.awt.Dimension(830, 700));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tblHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã hóa đơn", "Ngày tạo", "Trạng thái", "Nhân viên", "Khách hàng"
            }
        ));
        tblHoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHoaDonMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tblHoaDon);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jLabel27.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(11, 42, 61));
        jLabel27.setText("Hóa đơn chờ");

        jLabel28.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(11, 42, 61));
        jLabel28.setText("Giỏ hàng");

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tblGioHang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Mã sản phẩm", "Sản phẩm", "Số lượng", "Giá"
            }
        ));
        jScrollPane8.setViewportView(tblGioHang);

        btnXoaSanPham.setBackground(new java.awt.Color(255, 204, 0));
        btnXoaSanPham.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnXoaSanPham.setForeground(new java.awt.Color(255, 255, 255));
        btnXoaSanPham.setText("Xóa");
        btnXoaSanPham.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaSanPhamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnXoaSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnXoaSanPham)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel29.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(11, 42, 61));
        jLabel29.setText("Danh sách sản phẩm");

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txt_timKiem.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txt_timKiemCaretUpdate(evt);
            }
        });
        txt_timKiem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_timKiemFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_timKiemFocusLost(evt);
            }
        });
        txt_timKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_timKiemKeyReleased(evt);
            }
        });

        tblCTSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SP", "Sản Phẩm", "Màu Sắc", "Chất liệu", "Năm sản xuất", "Giá Bán", "Số Lượng", "Kích Cỡ", "Trạng Thái"
            }
        ));
        tblCTSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCTSanPhamMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblCTSanPham);

        lbl_locMauSac.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lbl_locMauSac.setText("Màu sắc");

        cbo_locMauSac.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbo_locMauSacItemStateChanged(evt);
            }
        });
        cbo_locMauSac.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cbo_locMauSacKeyReleased(evt);
            }
        });

        lbl_locDongSP.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lbl_locDongSP.setText("Size:");

        cbo_locSize.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbo_locSizeItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 738, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_timKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_locMauSac)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbo_locMauSac, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_locDongSP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbo_locSize, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_timKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbo_locMauSac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_locMauSac, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_locDongSP, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbo_locSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 95, Short.MAX_VALUE))
        );

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel34.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel34.setText("Nhân viên:");

        jLabel35.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel35.setText("Khách hàng:");

        btnThayDoi.setBackground(new java.awt.Color(255, 204, 0));
        btnThayDoi.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        btnThayDoi.setForeground(new java.awt.Color(255, 255, 255));
        btnThayDoi.setText("Thay đổi");
        btnThayDoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThayDoiActionPerformed(evt);
            }
        });

        cbbNhanVienBH.setEnabled(false);
        cbbNhanVienBH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbNhanVienBHActionPerformed(evt);
            }
        });

        btnThemKHBH.setBackground(new java.awt.Color(255, 0, 51));
        btnThemKHBH.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnThemKHBH.setForeground(new java.awt.Color(255, 255, 255));
        btnThemKHBH.setText("+");
        btnThemKHBH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemKHBHActionPerformed(evt);
            }
        });

        btnReloadBH.setBackground(new java.awt.Color(255, 0, 51));
        btnReloadBH.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnReloadBH.setForeground(new java.awt.Color(255, 255, 255));
        btnReloadBH.setText("Load");
        btnReloadBH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadBHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel35)
                            .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cboKH, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbbNhanVienBH, 0, 135, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnReloadBH, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnThemKHBH, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(24, 24, 24))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(btnThayDoi)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(cbbNhanVienBH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReloadBH))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel35)
                            .addComponent(btnThemKHBH))
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addComponent(cboKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)))
                .addComponent(btnThayDoi)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel37.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel37.setText("Mã hóa đơn: ");

        jLabel38.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel38.setText("Ngày tạo:");

        labelTT.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        labelTT.setText("Thành tiền:");

        lblGiamGia.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblGiamGia.setText("Giảm giá:");

        jLabel39.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel39.setText("Thanh toán:");

        jLabel40.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel40.setText("Tiền khách đưa:");

        jLabel41.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel41.setText("Tiền thừa:");

        btnHuyHoaDon.setBackground(new java.awt.Color(255, 204, 0));
        btnHuyHoaDon.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        btnHuyHoaDon.setForeground(new java.awt.Color(255, 255, 255));
        btnHuyHoaDon.setText("Hủy hóa đơn");
        btnHuyHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyHoaDonActionPerformed(evt);
            }
        });

        btnLamMoi.setBackground(new java.awt.Color(255, 204, 0));
        btnLamMoi.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        btnLamMoi.setForeground(new java.awt.Color(255, 255, 255));
        btnLamMoi.setText("Làm mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        btnThanhToan.setBackground(new java.awt.Color(255, 204, 0));
        btnThanhToan.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnThanhToan.setForeground(new java.awt.Color(255, 255, 255));
        btnThanhToan.setText("Thanh toán");
        btnThanhToan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThanhToanActionPerformed(evt);
            }
        });

        lblThanhTien.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblThanhTien.setForeground(new java.awt.Color(204, 0, 0));
        lblThanhTien.setText("0");

        lblThanhToan.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblThanhToan.setForeground(new java.awt.Color(204, 0, 0));
        lblThanhToan.setText("0");

        jLabel43.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel43.setText("VNĐ");

        jLabel44.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel44.setText("VNĐ");

        jLabel45.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel45.setText("VNĐ");

        jLabel46.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel46.setText("VNĐ");

        txtTienKhachDua.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtTienKhachDua.setForeground(new java.awt.Color(204, 0, 0));
        txtTienKhachDua.setText("0");
        txtTienKhachDua.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTienKhachDuaKeyReleased(evt);
            }
        });

        lblTienThua.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblTienThua.setForeground(new java.awt.Color(204, 0, 0));
        lblTienThua.setText("0");

        btnTaoHoaDon.setBackground(new java.awt.Color(255, 204, 0));
        btnTaoHoaDon.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnTaoHoaDon.setForeground(new java.awt.Color(255, 255, 255));
        btnTaoHoaDon.setText("Tạo hóa đơn");
        btnTaoHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaoHoaDonActionPerformed(evt);
            }
        });

        cbbGiaGiam.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbGiaGiamItemStateChanged(evt);
            }
        });
        cbbGiaGiam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbGiaGiamActionPerformed(evt);
            }
        });

        lblTenVoucher.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblTenVoucher.setText("Không có mã giảm giá");

        btnLoadVoucher.setBackground(new java.awt.Color(255, 0, 51));
        btnLoadVoucher.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnLoadVoucher.setForeground(new java.awt.Color(255, 255, 255));
        btnLoadVoucher.setText("Load");
        btnLoadVoucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadVoucherActionPerformed(evt);
            }
        });

        jLabel42.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel42.setText("Phương thức:");

        cbo_pttt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37)
                    .addComponent(labelTT)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel39, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel38, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNgayTao, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel9Layout.createSequentialGroup()
                            .addGap(93, 93, 93)
                            .addComponent(txtMaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTaoHoaDon))
                        .addGroup(jPanel9Layout.createSequentialGroup()
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel40)
                                .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel9Layout.createSequentialGroup()
                                    .addComponent(txtTienKhachDua, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel9Layout.createSequentialGroup()
                                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(cbo_pttt, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblTienThua, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel9Layout.createSequentialGroup()
                            .addComponent(lblGiamGia, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(36, 36, 36)
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                                    .addComponent(lblThanhTien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                                    .addComponent(lblThanhToan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel9Layout.createSequentialGroup()
                                    .addComponent(lblTenVoucher, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                                    .addComponent(cbbGiaGiam, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnLoadVoucher))))
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(btnHuyHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(btnTaoHoaDon)
                    .addComponent(txtMaHD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel38)
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNgayTao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTT)
                    .addComponent(lblThanhTien)
                    .addComponent(jLabel43))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(lblTenVoucher)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbbGiaGiam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLoadVoucher)))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblGiamGia)))
                .addGap(9, 9, 9)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(lblThanhToan)
                    .addComponent(jLabel44))
                .addGap(10, 10, 10)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(jLabel46)
                    .addComponent(txtTienKhachDua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(jLabel45)
                    .addComponent(lblTienThua))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42)
                    .addComponent(cbo_pttt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHuyHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(139, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlBanHangLayout = new javax.swing.GroupLayout(pnlBanHang);
        pnlBanHang.setLayout(pnlBanHangLayout);
        pnlBanHangLayout.setHorizontalGroup(
            pnlBanHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBanHangLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(pnlBanHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBanHangLayout.createSequentialGroup()
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(421, 421, 421))
                    .addGroup(pnlBanHangLayout.createSequentialGroup()
                        .addGroup(pnlBanHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBanHangLayout.createSequentialGroup()
                                .addGroup(pnlBanHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(pnlBanHangLayout.createSequentialGroup()
                                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(5, 5, 5))
                            .addGroup(pnlBanHangLayout.createSequentialGroup()
                                .addGroup(pnlBanHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel29)
                                    .addGroup(pnlBanHangLayout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82))))
        );
        pnlBanHangLayout.setVerticalGroup(
            pnlBanHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBanHangLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBanHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBanHangLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1177, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnlBanHang, javax.swing.GroupLayout.PREFERRED_SIZE, 1177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 724, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnlBanHang, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents
    public double getPhanTramGiamGiaFromChuoi(String giaGiamChuoi) {
        try {
            // Loại bỏ ký tự không phải là số hoặc dấu % từ chuỗi
            String phanTramStr = giaGiamChuoi.replaceAll("[^\\d.%]", "");

            // Chuyển đổi phần trăm thành số
            double phanTram = Double.parseDouble(phanTramStr.replace("%", ""));

            // Chia cho 100 để có giá trị dạng thập phân
            return phanTram / 100.0;
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }
        return 0; // Trả về 0 nếu không thể chuyển đổi hoặc có lỗi
    }

    private double calculateDiscountedTotal(double total, String giaGiamChuoi, int selectRow) {
        // Sử dụng hàm getPhanTramGiamGiaFromChuoi để lấy giá trị phần trăm giảm giá
        selectRow = tblHoaDon.getSelectedRow();
        double phanTramGiam = getPhanTramGiamGiaFromChuoi(giaGiamChuoi);

        // Tính toán giảm giá và trả về tổng thanh toán mới
        return total * (1 - phanTramGiam);
    }
    private void tblHoaDonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHoaDonMouseClicked
        showHoaDon();
        int selectedRow = tblHoaDon.getSelectedRow();
        if (selectedRow != -1) {
            String idHoaDon = hoaDonService.getAllHoaDonCho().get(selectedRow).getId();

            // Sử dụng thông tin hóa đơn để truy vấn chi tiết hóa đơn từ cơ sở dữ liệu
            List<HoaDonChiTiet> chiTietList = hoaDonChiTietService.getChiTietHoaDonByIdHoaDon(idHoaDon);

            // Hiển thị thông tin chi tiết hóa đơn lên bảng hoặc giao diện người dùng
            DefaultTableModel chiTietModel = (DefaultTableModel) tblGioHang.getModel();
            chiTietModel.setRowCount(0);
            double tongTien = 0;
            for (HoaDonChiTiet hoaDonChiTiet : chiTietList) {
                chiTietModel.addRow(new Object[]{
                    hoaDonChiTiet.getMaCTHD(),
                    hoaDonChiTiet.getChiTietSP().getMaCT(),
                    hoaDonChiTiet.getSanPham(),
                    hoaDonChiTiet.getSoLuong(),
                    hoaDonChiTiet.getDonGia()
                });
                tongTien += hoaDonChiTiet.getDonGia();
            }
            lblThanhTien.setText(String.valueOf(tongTien));
            KhuyenMai chuongTrinhGiamGia = (KhuyenMai) cbbGiaGiam.getSelectedItem();
            if (chuongTrinhGiamGia != null) {
                // Lấy giảm giá từ chương trình giảm giá
                String giaGiamChuoi = chuongTrinhGiamGia.getGiamGia();

                // Tính toán và hiển thị tổng thanh toán mới dựa trên giảm giá
                double tongTienSauGiam = calculateDiscountedTotal(tongTien, giaGiamChuoi, selectedRow);
                lblThanhToan.setText(String.valueOf(tongTienSauGiam));
            } else {
                lblThanhToan.setText(String.valueOf(tongTien));
            }
        }
    }//GEN-LAST:event_tblHoaDonMouseClicked

    private void btnXoaSanPhamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaSanPhamActionPerformed
        int select = tblGioHang.getSelectedRow();
        int s = tblHoaDon.getSelectedRow();

        if (select == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một sản phẩm để xóa.");
            return;
        }

        // Lấy thông tin sản phẩm từ dòng đã chọn
        String maCTSP = (String) tblGioHang.getValueAt(select, 1);
        String idCTHD = (String) tblGioHang.getValueAt(select, 0);
        int soLuong = (int) tblGioHang.getValueAt(select, 3);
        // Lấy thông tin trạng thái từ service hoặc repository của bạn
        String trangThaiHienTai = chiTietSPService.getTrangThaiSanPham(maCTSP);

        // Gọi phương thức xoaSanPhamKhoiHoaDon từ service hoặc repository của bạn
        Integer row = hoaDonChiTietService.xoaSanPhamKhoiHoaDon(maCTSP, idCTHD, soLuong);

        if (row > 0) {
            // Nếu có hàng được xóa, thông báo thành công
            JOptionPane.showMessageDialog(this, "Xóa sản phẩm thành công.");
            int soLuongConLai = chiTietSPService.getSoLuongSanPhamConLai(maCTSP);

            // Cập nhật số lượng và trạng thái
            chiTietSPService.updateSoLuongVaTrangThai(maCTSP, soLuongConLai, trangThaiHienTai);
            loadTableGioHang();
            loadTableChitietSP();
        } else {
            // Nếu không có hàng nào được xóa, thông báo lỗi
            JOptionPane.showMessageDialog(this, "Không thể xóa sản phẩm. Vui lòng thử lại.");
        }

        String idHoaDon = hoaDonService.getAllHoaDonCho().get(s).getId();
        List<HoaDonChiTiet> chiTietList = hoaDonChiTietService.getChiTietHoaDonByIdHoaDon(idHoaDon);

        // Hiển thị thông tin chi tiết hóa đơn lên bảng hoặc giao diện người dùng
        DefaultTableModel chiTietModel = (DefaultTableModel) tblGioHang.getModel();
        chiTietModel.setRowCount(0);
        double tongTien = 0;
        for (HoaDonChiTiet hoaDonChiTiet : chiTietList) {
            chiTietModel.addRow(new Object[]{
                hoaDonChiTiet.getMaCTHD(),
                hoaDonChiTiet.getChiTietSP().getMaCT(),
                hoaDonChiTiet.getSanPham(),
                hoaDonChiTiet.getSoLuong(),
                hoaDonChiTiet.getDonGia()
            });
            tongTien += hoaDonChiTiet.getDonGia();
        }
        lblThanhTien.setText(String.valueOf(tongTien));
        KhuyenMai chuongTrinhGiamGia = (KhuyenMai) cbbGiaGiam.getSelectedItem();
        if (chuongTrinhGiamGia != null) {
            // Lấy giảm giá từ chương trình giảm giá
            String giaGiamChuoi = chuongTrinhGiamGia.getGiamGia();

            // Tính toán và hiển thị tổng thanh toán mới dựa trên giảm giá
            double tongTienSauGiam = calculateDiscountedTotal(tongTien, giaGiamChuoi, s);
            lblThanhToan.setText(String.valueOf(tongTienSauGiam));
        } else {
            lblThanhToan.setText(String.valueOf(tongTien));
        }
    }//GEN-LAST:event_btnXoaSanPhamActionPerformed

    private void btnThayDoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThayDoiActionPerformed
        int selectedRow = tblHoaDon.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn để thay đổi.");
            return;
        }

        String maHoaDon = (String) tblHoaDon.getValueAt(selectedRow, 0);

        // Lấy giá trị đã chọn từ ComboBox
        NhanVienModel selectedNhanVien1 = (NhanVienModel) cbbNhanVienBH.getSelectedItem();
        KhachHang selectedKhachHang1 = (KhachHang) cboKH.getSelectedItem();

        // Tạo đối tượng HoaDon để truyền vào phương thức thayDoiNhanVienOrKhachHang
        HoaDon hoaDon = new HoaDon();
        hoaDon.setNv(selectedNhanVien1);
        hoaDon.setKh(selectedKhachHang1);

        Integer row = hoaDonService.thayDoiNhanVienOrKhachHang(hoaDon, maHoaDon);

        if (row > 0) {
            // Nếu có hàng được cập nhật, thông báo thành công
            JOptionPane.showMessageDialog(this, "Thay đổi thành công.");
            loadTableHoaDonCho();
        } else {
            // Nếu không có hàng nào được cập nhật, thông báo lỗi
            JOptionPane.showMessageDialog(this, "Không thể thay đổi. Vui lòng thử lại.");
        }
    }//GEN-LAST:event_btnThayDoiActionPerformed

    private void btnThemKHBHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemKHBHActionPerformed
        viewKH view = new viewKH();
        view.setVisible(true);
        // Thêm WindowListener để theo dõi sự kiện đóng cửa sổ
        view.addWindowListener(new WindowAdapter() {
            public void windowClosed(WindowEvent e) {
                // Được gọi khi cửa sổ được đóng
                List<KhachHang> khachHangs = khachHangService.getAll();
                modelKH = (DefaultComboBoxModel) new DefaultComboBoxModel<>(khachHangs.toArray());
                cboKH.setModel((DefaultComboBoxModel) modelKH);
            }
        });
    }//GEN-LAST:event_btnThemKHBHActionPerformed

    private void btnReloadBHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadBHActionPerformed

    }//GEN-LAST:event_btnReloadBHActionPerformed

    private void btnHuyHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyHoaDonActionPerformed
        int selectedRow = tblHoaDon.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn để hủy.");
            return;
        }

        String maHoaDon = (String) tblHoaDon.getValueAt(selectedRow, 0);
        HoaDon hoaDon = new HoaDon();
        hoaDon.setTrangThai("Hóa đơn hủy");

        Integer row = hoaDonService.huyHoaDon(hoaDon, maHoaDon);

        if (row > 0) {
            // Nếu có hàng được cập nhật, thông báo thành công
            JOptionPane.showMessageDialog(this, "Hủy hóa đơn thành công.");
            loadTableHoaDonCho();
            loadTableChitietSP();
        } else {
            // Nếu không có hàng nào được cập nhật, thông báo lỗi
            JOptionPane.showMessageDialog(this, "Không thể hủy hóa đơn. Vui lòng thử lại.");
        }
    }//GEN-LAST:event_btnHuyHoaDonActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        reset();
    }//GEN-LAST:event_btnLamMoiActionPerformed
    public void reset() {
        txtMaHD.setText(null);
        txtNgayTao.setText(null);
        lblThanhTien.setText("0");
        lblThanhToan.setText("0");
        txtTienKhachDua.setText("0");
        lblTienThua.setText("0");
    }
    private void btnThanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThanhToanActionPerformed
        int selectedRow = tblHoaDon.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn để thanh toán.");
            return;
        }
        String idHoaDon = hoaDonService.getAllHoaDonCho().get(selectedRow).getId();
        String madHoaDon = (String) tblHoaDon.getValueAt(selectedRow, 0);
        PTTToan selectedPhuongThuc = (PTTToan) cbo_pttt.getSelectedItem();

        if (selectedPhuongThuc == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một phương thức thanh toán.");
            return;
        }

        PTTToan pttt = (PTTToan) cbo_pttt.getSelectedItem();
        NhanVienModel nhanVienModel = (NhanVienModel) cbbNhanVienBH.getSelectedItem();
        KhachHang khachHang = (KhachHang) cboKH.getSelectedItem();
        LocalDateTime ngayThanhToan = LocalDateTime.now();
        double giaTien = Double.parseDouble(lblThanhToan.getText());
        double tienSP = Double.parseDouble(lblThanhTien.getText());
        double tienKhachDua = Double.parseDouble(txtTienKhachDua.getText().trim());
        if (tienKhachDua == 0) {
            JOptionPane.showMessageDialog(this, "Khách chưa đưa tiền");
            return;
        }
        double tienThua = Double.parseDouble(lblTienThua.getText());
        String trangThai = "Đã thanh toán";

        HoaDon hoaDon = new HoaDon();
        hoaDon.setId(madHoaDon);
        hoaDon.setPttt(pttt);
        hoaDon.setNv(nhanVienModel);
        hoaDon.setKh(khachHang);
        hoaDon.setNgayThanhToan(ngayThanhToan);
        hoaDon.setTienHoaDon(tienSP);
        hoaDon.setTongTien(giaTien);
        hoaDon.setTienKhachDua(tienKhachDua);
        hoaDon.setTienThua(tienThua);
        hoaDon.setTrangThai(trangThai);

        Integer rowsUpdated = hoaDonService.thanhToan(hoaDon, madHoaDon);

        if (rowsUpdated > 0) {
            // Nếu có hàng được cập nhật, thông báo thanh toán thành công
            JOptionPane.showMessageDialog(this, "Thanh toán thành công.");
            loadTableHoaDonCho();
            reset();
            DefaultTableModel model = (DefaultTableModel) tblGioHang.getModel();
            model.setRowCount(0);

            // In hóa đơn ra file Word
            List<HoaDonChiTiet> chiTietHoaDonList = hoaDonChiTietService.getChiTietHoaDonByIdHoaDon(idHoaDon);
            InHoaDon ihd = new InHoaDon();
            String fileName = "D:/HD/" + madHoaDon + ".pdf";
            ihd.generateInvoice(fileName, hoaDon, chiTietHoaDonList);

        } else {
            // Nếu không có hàng nào được cập nhật, thông báo lỗi
            JOptionPane.showMessageDialog(this, "Không thể thanh toán. Vui lòng thử lại.");
        }
    }//GEN-LAST:event_btnThanhToanActionPerformed
    private String getCurrentMaHoaDonList() {
        Set<String> existingMaHoaDon = new HashSet<>();

        // Lọc tất cả các hóa đơn từ cơ sở dữ liệu
        for (HoaDon hoaDon : hoaDonService.getAll()) {
            existingMaHoaDon.add(hoaDon.getMaHD());
        }

        int soThuTu = 1;

        // Tạo mã mới đảm bảo sự duy nhất
        while (true) {
            String maHoaDon = "HD" + soThuTu;

            if (!existingMaHoaDon.contains(maHoaDon)) {
                // Nếu mã không tồn tại, sử dụng nó
                break;
            }

            // Nếu mã đã tồn tại, tăng số thứ tự lên 1 và thử lại
            soThuTu++;
        }

        HoaDon hoaDon = new HoaDon("HD" + soThuTu);
        // Trả về mã hóa đơn mới
        return "HD" + soThuTu;
    }

    public HoaDon getInputHoaDonTao() {
        HoaDon hoaDon = new HoaDon();
        // Tạo mã hóa đơn
        String maHoaDon = getCurrentMaHoaDonList();
        hoaDon.setMaHD(maHoaDon);
        hoaDon.setNgayTao(LocalDateTime.now());
        hoaDon.setTrangThai("Chờ thanh toán");
        selectedNhanVien = (NhanVienModel) modelNV.getSelectedItem();
        selectedKhachHang = (KhachHang) modelKH.getSelectedItem();

        hoaDon.setNv(selectedNhanVien);
        hoaDon.setKh(selectedKhachHang);
        return hoaDon;
    }

    boolean checkSohoaDon() {
        List<HoaDon> listHoaDon = hoaDonService.getAllHoaDonCho();
        if (listHoaDon.size() >= 3) {
            JOptionPane.showMessageDialog(this, "Không tạo quá 3 hóa đơn");
            return false;
        }
        return true;
    }

    private void btnTaoHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaoHoaDonActionPerformed
        HoaDon hoaDon = getInputHoaDonTao();
        if (checkSohoaDon()) {
            if (hoaDonService.addHoaDon(hoaDon) != null) {
                JOptionPane.showMessageDialog(this, "OK");
                loadTableHoaDonCho();
            } else {
                JOptionPane.showMessageDialog(this, "Fails");
            }
        }
    }//GEN-LAST:event_btnTaoHoaDonActionPerformed

    private void cbbGiaGiamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbGiaGiamActionPerformed

    }//GEN-LAST:event_cbbGiaGiamActionPerformed

    private void btnLoadVoucherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadVoucherActionPerformed

    }//GEN-LAST:event_btnLoadVoucherActionPerformed
    public HoaDon getHoaDonByMaHoaDon(String maHoaDon) {
        List<HoaDon> hoaDonList = hoaDonService.getAllHoaDonCho();
        for (HoaDon hoaDon : hoaDonList) {
            if (hoaDon.getMaHD().equals(maHoaDon)) {
                return hoaDon;
            }
        }

        // Trường hợp không tìm thấy
        return null;
    }

    private HoaDon getHoaDonDangChon() {
        int selectedRow = tblHoaDon.getSelectedRow();
        if (selectedRow != -1) {
            // Lấy mã hóa đơn từ cột "Mã Hóa Đơn" trong bảng
            String maHoaDon = (String) tblHoaDon.getValueAt(selectedRow, 0);

            // Gọi phương thức để lấy hóa đơn từ mã hóa đơn
            return getHoaDonByMaHoaDon(maHoaDon);
        }
        return null;
    }

    private String getCurrentMaHoaDonCT() {
        Set<String> existingMaHoaDon = new HashSet<>();

        // Lọc tất cả các hóa đơn từ cơ sở dữ liệu
        for (HoaDonChiTiet hoaDonChiTiet : hoaDonChiTietService.getAll()) {
            existingMaHoaDon.add(hoaDonChiTiet.getMaCTHD());
        }

        int soThuTu = 1;

        // Tạo mã mới đảm bảo sự duy nhất
        while (true) {
            String maHoaDon = "CTHD" + soThuTu;

            if (!existingMaHoaDon.contains(maHoaDon)) {
                // Nếu mã không tồn tại, sử dụng nó
                break;
            }

            // Nếu mã đã tồn tại, tăng số thứ tự lên 1 và thử lại
            soThuTu++;
        }

        HoaDonChiTiet hoaDonChiTiet = new HoaDonChiTiet("CTHD" + soThuTu);
        // Trả về mã hóa đơn mới
        return "CTHD" + soThuTu;
    }
    private void tblCTSanPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCTSanPhamMouseClicked
        int indexHoaDon = tblHoaDon.getSelectedRow();

        if (indexHoaDon == -1) {
            JOptionPane.showMessageDialog(this, "Chọn hóa đơn rồi hãy thêm sản phẩm");
        } else {
            int selectedRow = tblCTSanPham.getSelectedRow();
            int selectedHoaDonRow = tblHoaDon.getSelectedRow();

            // Lấy thông tin từ dòng được chọn
            String maCTHD = getCurrentMaHoaDonCT();
            String idCTSP = (String) tblCTSanPham.getValueAt(selectedRow, 0);
            double donGia = (double) tblCTSanPham.getValueAt(selectedRow, 5);
            int soLuongHienTai = (int) tblCTSanPham.getValueAt(selectedRow, 6);  // Số lượng hiện tại của sản phẩm
            String maHoaDon = hoaDonService.getAllHoaDonCho().get(indexHoaDon).getId();

            // Lấy số lượng từ người dùng (có thể sử dụng JOptionPane.showInputDialog hoặc một trường JTextField)
            String input = JOptionPane.showInputDialog(this, "Nhập số lượng sản phẩm cho hóa đơn:");

            if (input != null && !input.isEmpty()) {
                try {
                    int soLuongNhap = Integer.parseInt(input);

                    // Tạo chi tiết hóa đơn
                    ChiTietSP chiTietSP = new ChiTietSP(idCTSP, null, null, null, null, null, null, null, donGia, null);
                    HoaDonChiTiet hdct = new HoaDonChiTiet();
                    hdct.setMaCTHD(maCTHD);
                    hdct.setChiTietSP(chiTietSP);
                    hdct.setHoaDon(getHoaDonDangChon());
                    hdct.setSoLuong(soLuongNhap);  // Sử dụng số lượng nhập vào
                    hdct.setDonGia(donGia * soLuongNhap);

                    // Kiểm tra nếu số lượng nhập vào lớn hơn số lượng hiện tại
                    if (soLuongNhap > soLuongHienTai) {
                        JOptionPane.showMessageDialog(this, "Số lượng không đủ.");
                        return;  // Kết thúc sự kiện nếu số lượng không đủ
                    }
                    if (soLuongNhap - soLuongHienTai == 0) {
                        // Nếu số lượng là 0, cập nhật trạng thái là "hết hàng"
                        // (Giả sử có một phương thức cập nhật trạng thái)
                        chiTietSPService.updateTrangThaiHetHang(idCTSP);
//                        hdct.setTrangThai("Hết hàng");
                    }

                    // Thêm chi tiết hóa đơn
                    int result = hoaDonChiTietService.addChiTietHoaDon(hdct);

                    if (result > 0) {
                        JOptionPane.showMessageDialog(this, "Thêm chi tiết hóa đơn thành công.");

                        // Cập nhật bảng chi tiết hóa đơn
                        List<HoaDonChiTiet> chiTietHoaDonList = hoaDonChiTietService.getChiTietHoaDonByIdHoaDon(maHoaDon);

                        // Xóa tất cả các dòng hiện tại trong bảng
                        DefaultTableModel model = (DefaultTableModel) tblGioHang.getModel();
                        model.setRowCount(0);

                        // Thêm lại dữ liệu mới vào bảng
                        for (HoaDonChiTiet chiTietHoaDon : chiTietHoaDonList) {
                            double donGiaUpdated = chiTietHoaDon.getDonGia();
                            model.addRow(new Object[]{
                                chiTietHoaDon.getId(),
                                chiTietHoaDon.getChiTietSP().getMaCT(),
                                chiTietHoaDon.getSanPham(),
                                chiTietHoaDon.getSoLuong(),
                                donGiaUpdated
                            });
                        }
                        loadTableChitietSP();
                    } else {
                        JOptionPane.showMessageDialog(this, "Thêm chi tiết hóa đơn thất bại.");
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Số lượng không hợp lệ. Vui lòng nhập lại.");
                }
                //load lại giá
                String idHoaDon = hoaDonService.getAllHoaDonCho().get(indexHoaDon).getId();

                List<HoaDonChiTiet> chiTietList = hoaDonChiTietService.getChiTietHoaDonByIdHoaDon(idHoaDon);

                // Hiển thị thông tin chi tiết hóa đơn lên bảng hoặc giao diện người dùng
                DefaultTableModel chiTietModel = (DefaultTableModel) tblGioHang.getModel();
                chiTietModel.setRowCount(0);
                double tongTien = 0;
                for (HoaDonChiTiet hoaDonChiTiet : chiTietList) {
                    chiTietModel.addRow(new Object[]{
                        hoaDonChiTiet.getMaCTHD(),
                        hoaDonChiTiet.getChiTietSP().getMaCT(),
                        hoaDonChiTiet.getSanPham(),
                        hoaDonChiTiet.getSoLuong(),
                        hoaDonChiTiet.getDonGia()
                    });
                    tongTien += hoaDonChiTiet.getDonGia();
                }
                lblThanhTien.setText(String.valueOf(tongTien));
                KhuyenMai chuongTrinhGiamGia = (KhuyenMai) cbbGiaGiam.getSelectedItem();
                if (chuongTrinhGiamGia != null) {
                    // Lấy giảm giá từ chương trình giảm giá
                    String giaGiamChuoi = chuongTrinhGiamGia.getGiamGia();

                    // Tính toán và hiển thị tổng thanh toán mới dựa trên giảm giá
                    double tongTienSauGiam = calculateDiscountedTotal(tongTien, giaGiamChuoi, indexHoaDon);
                    lblThanhToan.setText(String.valueOf(tongTienSauGiam));
                } else {
                    lblThanhToan.setText(String.valueOf(tongTien));
                }
            }
        }
    }//GEN-LAST:event_tblCTSanPhamMouseClicked
    private void updateTienThua() {
        try {
            double tienKhachDua = Double.parseDouble(txtTienKhachDua.getText());
            double tongTien = Double.parseDouble(lblThanhToan.getText());

            // Thực hiện phép trừ để tính tiền thừa
            double tienThua = tienKhachDua - tongTien;

            // Cập nhật giá trị lên lblTienThua
            lblTienThua.setText(String.valueOf(tienThua));
        } catch (NumberFormatException ex) {
            // Xử lý trường hợp người dùng nhập không đúng định dạng số
            lblTienThua.setText("Không hợp lệ");
        }
    }
    private void txtTienKhachDuaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTienKhachDuaKeyReleased
        // TODO add your handling code here:
        updateTienThua();
    }//GEN-LAST:event_txtTienKhachDuaKeyReleased

    private void txt_timKiemCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txt_timKiemCaretUpdate
        //        // TODO add your handling code here:
        //        if (txt_timKiem.getText().isEmpty()) {
        //            loadTable(null);
        //        }
        //        loadTable(txt_timKiem.getText());
    }//GEN-LAST:event_txt_timKiemCaretUpdate

    private void txt_timKiemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_timKiemFocusGained
        // TODO add your handling code here:
        //        txt_timKiem.setText("");
    }//GEN-LAST:event_txt_timKiemFocusGained

    private void txt_timKiemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_timKiemFocusLost
        // TODO add your handling code here:
        //        txt_timKiem.setText("Tìm Kiếm...");
        //        loadTable(null);
    }//GEN-LAST:event_txt_timKiemFocusLost

    private void txt_timKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_timKiemKeyReleased
        String searchText = txt_timKiem.getText();
        this.fillTableCTSP(chiTietSPService.locTen(searchText));
    }//GEN-LAST:event_txt_timKiemKeyReleased

    void fillTableCTSP(List<ChiTietSP> list) {
        DefaultTableModel tblModel = (DefaultTableModel) tblCTSanPham.getModel();
        tblModel.setRowCount(0);

        for (ChiTietSP chiTietSP : list) {
            tblModel.addRow(chiTietSP.toDataRow());
        }
    }
    private void cbo_locMauSacItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbo_locMauSacItemStateChanged
        MauSac selectedMauSac = (MauSac) cbo_locMauSac.getSelectedItem();
        fillTableCTSP(chiTietSPService.locTenMau(selectedMauSac));
    }//GEN-LAST:event_cbo_locMauSacItemStateChanged

    private void cbo_locMauSacKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbo_locMauSacKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_cbo_locMauSacKeyReleased

    private void cbo_locSizeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbo_locSizeItemStateChanged
        Size selectedSize = (Size) cbo_locSize.getSelectedItem();
        fillTableCTSP(chiTietSPService.locTenSize(selectedSize));
    }//GEN-LAST:event_cbo_locSizeItemStateChanged
    private void updateTotalPayment() {
        int selectedRow = tblHoaDon.getSelectedRow();
        if (selectedRow != -1) {
            String idHoaDon = hoaDonService.getAllHoaDonCho().get(selectedRow).getId();

            // Sử dụng thông tin hóa đơn để truy vấn chi tiết hóa đơn từ cơ sở dữ liệu
            List<HoaDonChiTiet> chiTietList = hoaDonChiTietService.getChiTietHoaDonByIdHoaDon(idHoaDon);

            // Hiển thị thông tin chi tiết hóa đơn lên bảng hoặc giao diện người dùng
            DefaultTableModel chiTietModel = (DefaultTableModel) tblGioHang.getModel();
            chiTietModel.setRowCount(0);
            double tongTien = 0;
            for (HoaDonChiTiet hoaDonChiTiet : chiTietList) {
                chiTietModel.addRow(new Object[]{
                    hoaDonChiTiet.getMaCTHD(),
                    hoaDonChiTiet.getChiTietSP().getMaCT(),
                    hoaDonChiTiet.getSanPham(),
                    hoaDonChiTiet.getSoLuong(),
                    hoaDonChiTiet.getDonGia()
                });
                tongTien += hoaDonChiTiet.getDonGia();
            }
            lblThanhTien.setText(String.valueOf(tongTien));

            KhuyenMai chuongTrinhGiamGia = (KhuyenMai) cbbGiaGiam.getSelectedItem();
            if (chuongTrinhGiamGia != null) {
                // Lấy giảm giá từ chương trình giảm giá
                String giaGiamChuoi = chuongTrinhGiamGia.getGiamGia();

                // Tính toán và hiển thị tổng thanh toán mới dựa trên giảm giá và dòng được chọn
                double tongTienSauGiam = calculateDiscountedTotal(tongTien, giaGiamChuoi, selectedRow);
                lblThanhToan.setText(String.valueOf(tongTienSauGiam));
            }
        }
    }
    private void cbbGiaGiamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbGiaGiamItemStateChanged
        // TODO add your handling code here:
        updateTotalPayment();
    }//GEN-LAST:event_cbbGiaGiamItemStateChanged

    private void cbbNhanVienBHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbNhanVienBHActionPerformed
        // TODO add your handling code here:
//        UserLoginModel userLoginModel = new UserLoginModel();
//        String tk = userLoginModel.getTaiKhoan();
//        String mk = userLoginModel.getMatKhau();
//
//        NhanVienModel loggedInNhanVien = LoginService.getLoggedInNhanVien(tk, mk);
//
//        if (loggedInNhanVien != null) {
//            // Cập nhật cbbNhanVienBH với thông tin của nhân viên đăng nhập
//            cbbNhanVienBH.setSelectedItem(loggedInNhanVien);
//        }
    }//GEN-LAST:event_cbbNhanVienBHActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHuyHoaDon;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnLoadVoucher;
    private javax.swing.JButton btnReloadBH;
    private javax.swing.JButton btnTaoHoaDon;
    private javax.swing.JButton btnThanhToan;
    private javax.swing.JButton btnThayDoi;
    private javax.swing.JButton btnThemKHBH;
    private javax.swing.JButton btnXoaSanPham;
    private javax.swing.JComboBox<String> cbbGiaGiam;
    private javax.swing.JComboBox<String> cbbNhanVienBH;
    private javax.swing.JComboBox<String> cboKH;
    private javax.swing.JComboBox<String> cbo_locMauSac;
    private javax.swing.JComboBox<String> cbo_locSize;
    private javax.swing.JComboBox<String> cbo_pttt;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel labelTT;
    private javax.swing.JLabel lblGiamGia;
    private javax.swing.JLabel lblTenVoucher;
    private javax.swing.JLabel lblThanhTien;
    private javax.swing.JLabel lblThanhToan;
    private javax.swing.JLabel lblTienThua;
    private javax.swing.JLabel lbl_locDongSP;
    private javax.swing.JLabel lbl_locMauSac;
    private javax.swing.JPanel pnlBanHang;
    private javax.swing.JTable tblCTSanPham;
    private javax.swing.JTable tblGioHang;
    private javax.swing.JTable tblHoaDon;
    private javax.swing.JTextField txtMaHD;
    private javax.swing.JTextField txtNgayTao;
    private javax.swing.JTextField txtTienKhachDua;
    private javax.swing.JTextField txt_timKiem;
    // End of variables declaration//GEN-END:variables
    private void loadTableChitietSP() {
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) tblCTSanPham.getModel();

        model.setRowCount(0);
        List<ChiTietSP> list = chiTietSPService.getAllByTT();
        for (ChiTietSP chiTietSP : list) {
            model.addRow(new Object[]{
                //                chiTietSP.getId(),
                chiTietSP.getMaCT(),
                chiTietSP.getSanPham(),
                chiTietSP.getMauSac(),
                chiTietSP.getChatLieu(),
                chiTietSP.getNamSX(),
                chiTietSP.getGiaBan(),
                chiTietSP.getSoluong(),
                chiTietSP.getSize(),
                chiTietSP.getTrangThai()
            });

        }
    }

    private void loadTableHoaDonCho() {
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) tblHoaDon.getModel();

        model.setRowCount(0);
        List<HoaDon> list = hoaDonService.getAllHoaDonCho();
        for (HoaDon hoaDon : list) {
            model.addRow(new Object[]{
                //                hoaDon.getId(),
                hoaDon.getMaHD(),
                hoaDon.getNgayTao(),
                hoaDon.getTrangThai(),
                hoaDon.getNv(),
                hoaDon.getKh()
            });
        }
    }

    private void loadTableGioHang() {
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) tblGioHang.getModel();

        model.setRowCount(0);
        List<HoaDonChiTiet> list = hoaDonChiTietService.getAll();
        for (HoaDonChiTiet hoaDonChiTiet : list) {
            model.addRow(new Object[]{
                hoaDonChiTiet.getChiTietSP().getMaCT(),
                hoaDonChiTiet.getSanPham(),
                hoaDonChiTiet.getSoLuong(),
                hoaDonChiTiet.getDonGia()
            });
        }
    }

    private void showHoaDon() {
        Integer row = tblHoaDon.getSelectedRow();
        txtMaHD.setText((String) tblHoaDon.getValueAt(row, 0));
        LocalDateTime ngayTao = (LocalDateTime) tblHoaDon.getValueAt(row, 1);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        txtNgayTao.setText(ngayTao.format(formatter));

        selectedNhanVien = (NhanVienModel) tblHoaDon.getValueAt(row, 3);
        selectedKhachHang = (KhachHang) tblHoaDon.getValueAt(row, 4);

    }
}
